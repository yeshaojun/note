var content=fs.read('');

fs.readFile('',(error,content)=>{
	if(error) throw error
})

callBack放最后

错误优先（在异步操作中无法通过try catch 获取异常）

避免回调黑洞（回调不好的地方）

进程和线程（进程包含线程）

	每个正在运行的程序都可以称之为进程（node进程启动之后默认会创建一个线程，线程用于执行代码）
	每个应用程序运行都有一个进程
	进程是用来给应用程序提供一个运行的环境
	进程是操作系统为应用程序分配资源得到一个单位


	多线程都是假的，因为只有一个CPU(单核)
	线程创建耗费大
	线程数量有限
	Cpu在不同线程之间转换，有上下文转换，这个转换非常耗时

	线程之间共享数据很麻烦

非阻塞I/O:一个输入到输出之间的转换
node是如何充分利用单线程的？
