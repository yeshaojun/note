1.js解析与执行过程
	1.全局
		预处理阶段
			 文档加载的时候，会申明一个全局的词法环境 lexicalEnviroment==window{
			 	g:对函数的调用
			 },
			 然后扫描用声明得到方式创建的函数,用var定义的变量 加入到lexicalEnviroment中
			 //function g(){}  //  a=function()


			 命名冲突，比如 var f=5; function f(){}
			 先扫描函数申明后扫描变量(var 申明),处理函数有冲突的时候会覆盖，处理变量申明有冲突会忽略   
		执行阶段

	2.函数
		预处理阶段 
			1.没调用一次，产生一个词法环境
			2.先函数的参数，其余的同全局预处理  

		执行阶段
			给预处理阶段的成员赋值
			如果没有用var 声明的变量，会成为最外部词法环境的成员

2.作用域
	动态作用域:
		js无动态作用域，也没有块级作用域
	静态作用域：
		function f(){alert(x);}
		f [[scope]]==lexicaEnv==window	

		function f1(){
			var x=5; 
			f(); //真正执行的时候 le->f.[[scope]]
		}
	作用域的本质

闭包
	什么是闭包？
		一个函数捕获了外部的成员
	








	


